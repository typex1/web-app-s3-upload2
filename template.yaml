AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for a web app with S3 file upload functionality'

Parameters:
  AppName:
    Type: String
    Default: 'FileUploadApp'
    Description: 'Name of the application'
  
  StageName:
    Type: String
    Default: 'dev'
    Description: 'API Gateway deployment stage'

Resources:
  # S3 bucket for web app code
  WebAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AppName}-webapp-${AWS::AccountId}'
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # S3 bucket for uploaded files
  UploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AppName}-uploads-${AWS::AccountId}'
      AccessControl: Private
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # Lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: S3UploadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                Resource: !Sub '${UploadsBucket.Arn}/*'

  # Lambda function for generating pre-signed URLs
  PresignedUrlFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AppName}-presigned-url-generator'
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs14.x
      Timeout: 10
      Environment:
        Variables:
          UPLOADS_BUCKET: !Ref UploadsBucket
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();
          
          exports.handler = async (event) => {
            try {
              // Parse request body
              const body = JSON.parse(event.body);
              const fileName = body.fileName;
              const fileType = body.fileType;
              
              if (!fileName || !fileType) {
                return {
                  statusCode: 400,
                  headers: {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Credentials': true,
                  },
                  body: JSON.stringify({ error: 'fileName and fileType are required' })
                };
              }
              
              // Generate a unique key for the file
              const fileKey = `${Date.now()}-${fileName}`;
              
              // Set parameters for pre-signed URL
              const params = {
                Bucket: process.env.UPLOADS_BUCKET,
                Key: fileKey,
                ContentType: fileType,
                Expires: 300 // URL expires in 5 minutes
              };
              
              // Generate pre-signed URL
              const url = await s3.getSignedUrlPromise('putObject', params);
              
              return {
                statusCode: 200,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Credentials': true,
                },
                body: JSON.stringify({
                  uploadUrl: url,
                  fileKey: fileKey
                })
              };
            } catch (error) {
              console.error('Error generating pre-signed URL:', error);
              return {
                statusCode: 500,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Credentials': true,
                },
                body: JSON.stringify({ error: 'Failed to generate pre-signed URL' })
              };
            }
          };

  # API Gateway REST API
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AppName}-api'
      Description: 'API for file upload functionality'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway resource
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'generate-upload-url'

  # API Gateway method
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PresignedUrlFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true

  # API Gateway OPTIONS method for CORS
  ApiOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiMethod
      - ApiOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref StageName

  # Lambda permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PresignedUrlFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*'

  # AWS Amplify App
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: !Ref AppName
      Repository: 'https://github.com/user/repo'  # Replace with your repository URL
      AccessToken: '{{resolve:secretsmanager:AmplifyGitHubToken:SecretString:token}}'  # Replace with your GitHub token
      BuildSpec: |
        version: 1
        frontend:
          phases:
            build:
              commands:
                - echo "Building web app"
                - aws s3 sync s3://${WebAppBucket} ./
          artifacts:
            baseDirectory: ./
            files:
              - '**/*'
          cache:
            paths: []

  # AWS Amplify Branch
  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: main
      EnableAutoBuild: true

Outputs:
  WebAppBucketName:
    Description: 'S3 bucket for web app code'
    Value: !Ref WebAppBucket
    Export:
      Name: !Sub '${AWS::StackName}-WebAppBucket'

  UploadsBucketName:
    Description: 'S3 bucket for uploaded files'
    Value: !Ref UploadsBucket
    Export:
      Name: !Sub '${AWS::StackName}-UploadsBucket'

  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/generate-upload-url'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  AmplifyAppId:
    Description: 'Amplify App ID'
    Value: !GetAtt AmplifyApp.AppId
    Export:
      Name: !Sub '${AWS::StackName}-AmplifyAppId'

  AmplifyURL:
    Description: 'Amplify App URL'
    Value: !Sub 'https://main.${AmplifyApp.DefaultDomain}'
    Export:
      Name: !Sub '${AWS::StackName}-AmplifyURL'